H - Las rutinas no funcionan si pongo mas de un restaurante por persona.
P - El ID de la factura debe coger el siguiente al ultimo de la carpeta.
H - Cada restaurante de la factura necesita un dia distinto.
H - el dia de la rutina tiene que cambiar en cada ciclo.
H - añadir random al nif para que sea mas bonito.

P- crear distribucion para los dias que tardan en volver al restaurante.
P - crear distribucion para el numero de personas invitadas a comer.
P - crear distribucion para el numero de restaurantes que va el cliente

H - añadir add y delete routine en el routine routineController.
H - cambiar estructura del routineController y routinecreator.

H - agregar trabajadores en funcion del numero de mesas, y sus nominas de estos de las empresas.
H - agregar numero maximo de comensales al dia, numero de mesas x numero de comidas por hora.


Dudas
Trabajadores son parte de la lista de clientes y pueden ir a comer?



notas:
bespline
crear distribucion al gusto.
Se añadiran platos al final

Nominas:	

H - Datos de la empresa: Debe aparecer el nombre legal de la empresa, su domicilio fiscal, el CIF
y el código de cuenta de cotización (código numérico que la Tesorería General de la Seguridad
Social asigna a los empresarios y otros responsables del pago de cuotas a la Seguridad Social).

H - Datos del trabajador: Nombre completo, DNI, Número de afiliación a la Seguridad Social, Categoría
o grupo profesional, grupo de cotización, fecha de antigüedad o de ingreso a la empresa y código
de contrato.

P - Periodo de liquidación: Es el mes trabajado al que hace referencia esa nómina. Incluye la fecha
de inicio, la fecha de finalización y el total de días.

H - Salario base: Cantidad que el trabajador percibe por los días trabajados y que no puede ser inferior
a lo establecido por el convenio que se le aplique.


- Añadir clase generica para reader de provider y client
- Añadir NIF a provider.
- Añadir Clase generica para CFDI generator-

Campos de factura pendiente
- Concepto: addd texto
- Uso:
N01: nominas
G01: Compra a proveedores, venta de comida
G02: Devoluciones
G03: Servicios de limpieza


Dudas:
- Proveedores mensuales o diarios?
- ajustes avanzados como hacerlo
- Sniffer: como obtengo los eventos en el front end sin actualizar la pagina todo el rato.
- Solucionar el tema de cerrar la base de datos, como hacer para parar la web.
- Eliminar tabla y volver a crear de facturas o eliminar todas las filas?
- Cambiar la velocidad sin actualizar la pagina.
- notas hpds
- Solo actualizar cuando se porducen cambios con ese elemento. O usar AJax.

Proximos Pasos:
H - Usar Ajax para mostrar los eventos y cambiar la velocidad

H - añadir factura de impuestos de company.
N - Darle pesos de puntuacion a cada trabajo.
H - Los clientes y trabajadores pueden morir cuando son viejos.
H - añadir los eventos correspondientes para bajadas de salario deseado, contratos, renovacios y despidos.
H - plantear que cuando se produzca una trasaccion el banco haga la factura.
H - Solucionar dependencias circulares.
N - cambiar el numero de restaurantes por cliente
N - y los dias que tardan en ir
N - Mirar clases que calculen probabilidades
P - Clientes y trabajadores muertos ser reinsertados en el futuro.
H - Añadir estrategia a la hora de selecionar trabajo.
P - Mandar al front los eventos, no los mensajes.
Posibilidad - Poner las facturas y las transacciones como una unica clase
P - Eliminar las comillas en las calles de los proveedores

//General
    private static final int WORKER_COUNT = 1000;
    private static final int CLIENT_COUNT = 1000;
    private static final int RESTAURANT_COUNT = 25;
    private static final int PROVIDER_COUNT = 500;
    private static final int SERVICE_COUNT = 100;

    //Client
    private Integer[] clientSalaries;
    private Integer[] prices;
    private static final Map<Integer,Integer> restaurantGroup = new LinkedHashMap<>();
    private static final DistributionData SALARY_CLIENT = new DistributionData(1717,979.28);
    private static final int MIN_SALARY_CLIENT = 500;
    private static final MinMaxData INVITED_PEOPLE = new MinMaxData(0,3);
    private static final MinMaxData NUM_OF_RESTAURANT = new MinMaxData(1,5);
    private static final DistributionData PLATE_NUMBER = new DistributionData(2,0.7);

    //Restaurant
    private Map<Job, Integer> workerSalaryTable = new LinkedHashMap<>();
    private static final double INITIAL_SOCIAL_CAPITAL_RESTAURANT = 10000;
    public static final MinMaxData LENGTH_CONTRACT = new MinMaxData(90,360);
    public static final double RESTAURANT_PRICE_CHANGE = 0.02;
    private static final double CAPACITY = 1.0;
    public static final double RESTAURANT_CLOSE_LIMIT = -5000.0;

    //Provider
    private static final int INITIAL_SOCIAL_CAPITAL_PROVIDER = 10000;
    private Map<Product, Double> productSalePriceTable = new LinkedHashMap<>();
    public static final double PROVIDER_PRICE_CHANGE = 0.01;
    private static final double PROVIDER_CLOSE_LIMIT = -5000.0;
    
    //Service
    private static final int INITIAL_SOCIAL_CAPITAL_SERVICE = 10000;
    private Map<Service, Double> servicePriceTable = new LinkedHashMap<>();
    public static final double SERVICE_PRICE_CHANGE = 0.01;
    private static final double SERVICE_CLOSE_LIMIT = -5000.0;

    //Worker
    private static final double MIN_SALARY_WORKER = 500.0;
    private static final double SALARY_CHANGE = 0.05;
    private static final double SALARY_DESIRED_CHANGE = 0.001;
    private static final int RETIRE_AGE = 65;
    private static final double PERCENTAGE_RETIREMENT = 0.60;
